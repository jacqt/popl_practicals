POPL Practical 2


2.2:

This is the following output of a program that demonstrates the fact that
the arguments are not evaluated if they are not required:

  val x = new();;
  x := 3;;
  val incX() = x := !x + 1; 0;;
  val do_nothing(a) = !x;;
  do_nothing(incX());;

Corresponding output:

  $ ./fun test.fun
  --- x = <address 0>
  --> 3
  --- incX = <function>
  --- do_nothing = <function>
  --> 3

As can be seen, the paramtere `incX()` was not evaluated in the call made to
do_nothing

                                          ------

This is an example that shows that parameters are evaluated afresh each time they are used:

  val x = new();;
  x := 3;;
  val incX() = x := !x + 1; 0;;
  val do_something_thrice(a) = a; a; a; !x;;
  do_something_thrice(incX());;

Corresponding output:

  $ ./fun test.fun
  --- x = <address 0>
  --> 3
  --- incX = <function>
  --- do_something_thrice = <function>
  --> 6

As can be seen, the parameter `incX()` was evaluated three times, causing `x` to be incremented
three times

                                          ------

"Proof" that Jensen's thing works (i.e. some copy pasted output)
  $ ./fun jensen.fun
  --- sum = <function>
  --- go = <function>
  >>> go();;
  --> 285
  >>>

The modified code that would work under call-by-value semantics

  -- Jensen's device for Fun with name parameters

  val sum(i, a, b, f) =
    let val s = new() in
    i := a; s := 0;
    while !i < b do (s := !s + f(); i := !i + 1);
    !s;;

  val go() =
    let val i = new() in
    sum(i, 0, 10, lambda() !i * !i);;

Output:

  $ ./fun test.fun
  --- sum = <function>
  --- go = <function>
  >>> go();;
  --> 285
  >>>

This work in our new Fun interpreter, happily enough.


Optional 2.3:

Ayee, it works... I guess?
